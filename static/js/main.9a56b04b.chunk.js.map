{"version":3,"sources":["components/EventCard.js","components/EventMap.js","App.js","reportWebVitals.js","index.js"],"names":["EventCard","props","featured_image_url","title","browser_url","timeslots","location","className","src","alt","formattedTimeslots","formattedLocation","href","venue","address_lines","locality","region","filter","n","join","startDate","Date","start_date","dateAddendum","length","toLocaleTimeString","weekday","month","day","timeZoneName","hour","minute","MarkerComponent","text","EventMap","events","defaultProps","center","lat","lng","zoom","filteredEvents","e","bootstrapURLKeys","key","defaultCenter","defaultZoom","map","event","latitude","longitude","id","eventTypes","App","defaultParams","timeslot_start","useState","error","setError","isLoaded","setIsLoaded","setEvents","nextPage","setNextPage","loadEvents","queryParams","url","URLSearchParams","toString","fetch","then","res","json","result","data","next","useEffect","htmlFor","onChange","event_types","target","value","eventType","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a56b04b.chunk.js","sourcesContent":["// Simple emulation of event card layout on https://www.mobilize.us/\n// Assumptions: Every event has a id, title, browser_url, featured_image_url and at least 1 timeslot\nexport default function EventCard({ props }) {\n  const { featured_image_url, title, browser_url, timeslots, location } = props;\n\n  return (\n    <div className='event-card'>\n      <div className='inner'>\n        <div className='image-container'>\n          <img src={featured_image_url} alt={title}/>\n        </div>\n        <div className='details'>\n          <span>{formattedTimeslots(timeslots)}</span>\n          <h3>{title}</h3>\n          <p>{formattedLocation(location)}</p>\n          <a href={browser_url}>\n            Details\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Assume we always want to show venue and address if we have it, even for virtual events\nfunction formattedLocation(location) {\n  if (!location) return null;\n  const { venue, address_lines, locality, region } = location;\n  return [ venue, ...address_lines, locality, region].filter(n => n && n !== '').join(', ');\n}\n\n// Assume requirements are to show first timeslot date and total number of timeslots if more than one.\nfunction formattedTimeslots(timeslots) {\n  const startDate = new Date(timeslots[0].start_date * 1000);\n  const dateOptions = {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric',\n    timeZoneName: 'short',\n    hour: 'numeric',\n    minute: '2-digit'\n  };\n  const dateAddendum = timeslots.length > 1 ? ` + ${timeslots.length - 1} other times` : '';\n  return startDate.toLocaleTimeString('en-US', dateOptions) + dateAddendum;\n}\n","import GoogleMapReact from 'google-map-react';\nconst key = \"AIzaSyDoRY1XMAC6JJbg7ZhLqkPXsQvywrevXcA\" // Should be in secrets and not checked into version control, but moving fast!\n\nconst MarkerComponent = ({ text }) => <div className='event-map-marker' />;\n\nexport default function EventMap({ props }) {\n  const { events } = props;\n\n  // Center on united states\n  const defaultProps = {\n    center: {\n      lat: 39.8097343,\n      lng: -98.5556199\n    },\n    zoom: 4\n  };\n  if (events.length === 0) return null;\n  const filteredEvents = events.filter(e => e.location && e.location.location);\n  return (\n    <div className='event-map-container'>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key }}\n        defaultCenter={defaultProps.center}\n        defaultZoom={defaultProps.zoom}\n      >\n        {filteredEvents.map(event => (\n          <MarkerComponent\n            key={event.id}\n            lat={event.location.location.latitude}\n            lng={event.location.location.longitude}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport EventCard from './components/EventCard';\nimport EventMap from './components/EventMap';\n\nconst eventTypes = ['CANVASS', 'PHONE_BANK', 'TEXT_BANK', 'MEETING', 'COMMUNITY', 'FUNDRAISER', 'MEET_GREET', 'HOUSE_PARTY', 'VOTER_REG', 'TRAINING', 'FRIEND_TO_FRIEND_OUTREACH', 'DEBATE_WATCH_PARTY', 'ADVOCACY_CALL', 'RALLY', 'TOWN_HALL', 'OFFICE_OPENING', 'BARNSTORM', 'SOLIDARITY_EVENT', 'COMMUNITY_CANVASS', 'SIGNATURE_GATHERING', 'CARPOOL', 'WORKSHOP', 'PETITION', 'AUTOMATED_PHONE_BANK', 'LETTER_WRITING', 'LITERATURE_DROP_OFF', 'VISIBILITY_EVENT', 'OTHER']\nconst eventsEndpoint = 'https://api.mobilize.us/v1/events?' // Note: uses deprecated API call\n\nfunction App() {\n\n  // Setting state in App since app is scoped to a single API call\n  const defaultParams = {\n    timeslot_start: 'gte_now', // Assume we only care about displaying timeslots in the future\n  }\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [events, setEvents] = useState([]);\n  const [nextPage, setNextPage] = useState();\n\n  function loadEvents({ nextPage, queryParams }) {\n    const url = nextPage ? nextPage : (eventsEndpoint + new URLSearchParams(queryParams).toString())\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setEvents(result.data);\n          setNextPage(result.next);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError('Failed to load');\n        }\n      )\n  }\n\n  useEffect(() => {\n    loadEvents({ queryParams: defaultParams })\n  }, [])\n\n  function renderFilters() {\n    return (\n      <div className='event-filters'>\n        <label htmlFor='event-type-select'>Filter by type:</label>\n        <select id='event-type-select' onChange={(e) => loadEvents({ queryParams: { ...defaultParams, event_types: e.target.value }})}>\n          {eventTypes.map(eventType => (\n            <option value={eventType} key={eventType}>{eventType}</option>\n          ))}\n        </select>\n      </div>\n    )\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else if (events.length === 0) {\n    return <div>No events matched this query...</div>;\n  } else {\n    return (\n      <div>\n        <h1>Mobilize Feed</h1>\n        {renderFilters()}\n        <div>\n          {events.map(event => (\n            <EventCard props={event} key={event.id} />\n          ))}\n        </div>\n        <button onClick={() => loadEvents({ nextPage })}>Next Page</button>\n        <EventMap props={{ events }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}